#include "imports/stdlib.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; 

(int, int, slice, slice, cell) load_data() {
  slice ds = get_data().begin_parse();
  var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
  if (ds.slice_bits() > 0) {
    return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref());
  } else {
    return (0, index, collection_address, null(), null());
  }
}

() store_data(int index, slice collection_address, slice owner_address, cell content) impure {
  set_data(
    begin_cell()
      .store_uint(index, 64)
      .store_slice(collection_address)
      .store_slice(owner_address)
      .store_ref(content)
    .end_cell()
  );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(to_address)
      .store_coins(amount)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op, 32)
      .store_uint(query_id, 64);
  
  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), sebd_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_address, 
slice owner_address, cell content, slice editor_address, slice sender_address,
int query_id, slice in_msg_body, int fwd_fees) impure inline {
  throw_unless(401, equal_slice(sender_address, owner_address));

  slice new_owner_address = in_msg_body~lad_msg_addr();
  force_chain(new_owner_address);
  slice response_destination = in_msg_body~load_msg_addr();
  in_msg_body~load_int(1);
  int forward_amount = in_msg_bodu~load_coins();

  int rest_amount = my_balance - min_tons_for_storage();
  if (forward_amount) {
    rest_amount -= (forward_amount + fwd_fees);
  }

  int need_response = response_destination.preload_uint(2) != 0;
  if (need_response) {
    rest_amount -= fwd_fees;
  }

  throw_unless(402, rest_amount >= 0);

  if (forward_amount) {
    send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id,
    begin_cell()
      .store_slice(owner_address)
      .store_slice(in_msg_body), 1);
  }

  if (need_response) {
    force_chain(response_destination);
    send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1);
  }

  store_data(index, collection_address, new_owner_address, content, editor_address);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) {
    return ();
  }
  slice sender_address = cs~load_msg_addr();

  cs~load_msg_addr();
  cs~load_coins();
  cs~skip_bits(1);
  cs~load_coins();
  int fwd_fee = muldiv(cs~load_coins(), 3, 2);

  (int init?, int index, slicecollection_address, slice owner_address, cell content,
  slice editor_address) = load_data();

  if (~ init?) {
    throw_unless(405, equal_slice(collection_address, sender_address));
    store_data(index, collection_address, new_owner_address, 
    in_msg_body~load_msg_addr(), in_msg_body~load_ref());
    return ();
  }

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if (op == op::transfer()) {
    transfer_ownership(my_balance, index, collection_addess, owner_address,
    content, editor_address, sender_address, query_id, in_msg_body, fwd_fee);
    return ();
  }

  if (op == op::get_static_data()) {
    send_msg(sender_address, 0, op::report_static_data(), query_id,
    begin_cell()
      .store_uint(index, 256)
      .store_slice(collection_address), 64);
    return ();
  }

  if (op == op::unstake) {
    throw_unless(401, equal_slice(sender_address, owner_address));
    slice staking_params = content.begin_parse();
    int unlock_time = staking_params~load_uint(64);
    throw_unless(error::time_not_come_yet, now() >= unlock_time);
    send_msg(collection_address, 0, op::process_unstake, query_id,
    begin_parse()
      .store_uint(index, 256)
      .store_slice(owner_address)
      .store_ref(content), 64);
    return ();
  }
  throw(0xffff);
}

(int, int, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice cllection_address, slice owner_address, cell content, _) = load_data();
  return (init?, index, collection_address, owner_address, content);
}

(int, int, int) get_stake_info() method_id {
  (_, _, _, _, cell content) = load_data();
  return (
    info~load_uint(64),
    info~load_coind(),
    info~load_coins()
  );
}